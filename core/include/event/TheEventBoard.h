// TheEventBoard.h
// author: Johannes Wagner <wagner@hcm-lab.de>
// created: 2007/11/07
// Copyright (C) 2007-13 University of Augsburg, Lab for Human Centered Multimedia
//
// *************************************************************************************************
//
// This file is part of Social Signal Interpretation (SSI) developed at the 
// Lab for Human Centered Multimedia of the University of Augsburg
//
// This library is free software; you can redistribute itand/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 3 of the License, or any laterversion.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FORA PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along withthis library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
//
//*************************************************************************************************

#ifndef SSI_EVENT_THEEVENTBOARD_H
#define SSI_EVENT_THEEVENTBOARD_H

#include "base/IObject.h"
#include "base/ITheEventBoard.h"
#include "base/Array1D.h"
#include "ioput/option/OptionList.h"

namespace ssi {

class EventList;
class EventQueue;
class IESelect;
class Mutex;

class TheEventBoard : public ITheEventBoard {

friend class EventBoardWorker;
friend class Factory;

public: 

	class Options : public OptionList {

	public:
		Options () 
			: n_events (512), n_strings (1024), n_listener (64), n_sender (64), update (100) {

			addOption ("n_events", &n_events, 1, SSI_SIZE, "maximal # of buffered events");
			addOption ("n_sender_ids", &n_strings, 1, SSI_SIZE, "maximal # of strings");			
			addOption ("n_listener", &n_listener, 1, SSI_SIZE, "maximal # of listener");
			addOption ("n_sender", &n_sender, 1, SSI_SIZE, "maximal # of sender");			
			addOption ("update", &update, 1, SSI_SIZE, "update interval in milliseconds");			
		}

		ssi_size_t n_events;
		ssi_size_t n_strings;
		ssi_size_t n_listener;
		ssi_size_t n_sender;
		ssi_size_t update;
	};

public:

	Options *getOptions () { return &_options; }
	static const ssi_char_t *GetCreateName () { return "ssi_object_TheEventBoard"; }
	const ssi_char_t *getName () { return GetCreateName(); }
	const ssi_char_t *getInfo () { return "Collects events generated by sender components and distributes them to registered listener components."; }
	static IObject *Create (const ssi_char_t *file)	{ return new TheEventBoard (file); }

	void Start ();
	void Stop ();
	bool IsRunning () {
		return _is_running;
	}
	
	bool RegisterSender (IEventSender &sender);
	bool RegisterListener (IEventListener &listener,		
		const ssi_char_t *address = 0, 
		ssi_size_t time_span_ms = 0,
		IEvents::EVENT_STATE_FILTER::List state_filter = IEvents::EVENT_STATE_FILTER::ALL);
	bool update (ssi_event_t &e);
	void Clear ();

	virtual void Print (FILE *file = ssiout);
	virtual void Print (IEvents &events, FILE *file = ssiout);

protected:

    TheEventBoard (const ssi_char_t *file);
    ~TheEventBoard ();
	ssi_char_t *_file;
	Options _options;

    void release ();
	bool process (ssi_size_t n);

	EventList *_events;
	EventQueue *_queue;
	EventBoardWorker *_worker;
	bool _is_running;
	Mutex *_mutex;

	Array1D<IEventSender *> _sender;
	Array1D<IEventListener *> _listener;
	Array1D<IESelect *> _ieselect;
	Array1D<ssi_size_t> _concerns_listener;
};

}

#endif
